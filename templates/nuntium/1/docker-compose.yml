version: '2'
services:
  web: &rails
    image: instedd/nuntium:${NUNTIUM_VERSION}
    environment:
      DATABASE_URL: mysql2://${DATABASE_USER}:${DATABASE_PASS}@${DATABASE_HOST}/${DATABASE_NAME}
      MEMCACHE_SERVER: memcached:11211
      RABBITMQ_URL: amqp://rabbitmq
      {{- if eq .Values.GUISSO_ENABLED "true" }}
      GUISSO_ENABLED: "true"
      GUISSO_URL: ${GUISSO_URL}
      GUISSO_CLIENT_ID: ${GUISSO_CLIENT_ID}
      GUISSO_CLIENT_SECRET: ${GUISSO_CLIENT_SECRET}
      {{- end }}
      SCHEME: ${SCHEME}
      HOSTNAME: ${HOSTNAME}
    {{- if .Values.WEB_MEM_LIMIT }}
    mem_limit: ${WEB_MEM_LIMIT}
    {{- end }}
    {{- if .Values.WEB_MEM_RESERVATION }}
    mem_reservation: ${WEB_MEM_RESERVATION}
    {{- end }}

  memcached:
    image: memcached:1.4.24

  rabbitmq:
    image: rabbitmq:3.6
    hostname: ${RABBITMQ_HOSTNAME}
    volumes:
      - ${RABBITMQ_VOLUME}:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: nuntium
      RABBITMQ_DEFAULT_PASS: nuntium
      RABBITMQ_DEFAULT_VHOST: /nuntium

  workerfast:
    <<: *rails
    command: "bundle exec lib/services/generic_worker_daemon.rb production fast 1000"
    {{- if .Values.WORKER_MEM_LIMIT }}
    mem_limit: ${WORKER_MEM_LIMIT}
    {{- end }}
    {{- if .Values.WORKER_MEM_RESERVATION }}
    mem_reservation: ${WORKER_MEM_RESERVATION}
    {{- end }}

  workerslow:
    <<: *rails
    command: "bundle exec lib/services/generic_worker_daemon.rb production slow 2000"
    {{- if .Values.WORKER_MEM_LIMIT }}
    mem_limit: ${WORKER_MEM_LIMIT}
    {{- end }}
    {{- if .Values.WORKER_MEM_RESERVATION }}
    mem_reservation: ${WORKER_MEM_RESERVATION}
    {{- end }}

  cron:
    <<: *rails
    command: "bundle exec lib/services/cron_daemon.rb"
    {{- if .Values.WORKER_MEM_LIMIT }}
    mem_limit: ${WORKER_MEM_LIMIT}
    {{- end }}
    {{- if .Values.WORKER_MEM_RESERVATION }}
    mem_reservation: ${WORKER_MEM_RESERVATION}
    {{- end }}

  sched:
    <<: *rails
    command: "bundle exec lib/services/scheduled_jobs_service_daemon.rb"
    {{- if .Values.WORKER_MEM_LIMIT }}
    mem_limit: ${WORKER_MEM_LIMIT}
    {{- end }}
    {{- if .Values.WORKER_MEM_RESERVATION }}
    mem_reservation: ${WORKER_MEM_RESERVATION}
    {{- end }}

  smpp:
    <<: *rails
    command: "bundle exec lib/services/smpp_service_daemon.rb"
    {{- if .Values.WORKER_MEM_LIMIT }}
    mem_limit: ${WORKER_MEM_LIMIT}
    {{- end }}
    {{- if .Values.WORKER_MEM_RESERVATION }}
    mem_reservation: ${WORKER_MEM_RESERVATION}
    {{- end }}

  db-migrate:
    <<: *rails
    {{- if .Values.WORKER_MEM_LIMIT }}
    mem_limit: ${WORKER_MEM_LIMIT}
    {{- end }}
    {{- if .Values.WORKER_MEM_RESERVATION }}
    mem_reservation: ${WORKER_MEM_RESERVATION}
    {{- end }}
    command: /app/migrate
    labels:
      io.rancher.container.start_once: "true"
