version: '2'
services:
  web: &rails
    image: instedd/nuntium:${NUNTIUM_VERSION}
    environment:
      DATABASE_URL: mysql2://${DATABASE_USER}:${DATABASE_PASS}@${DATABASE_HOST}/${DATABASE_NAME}
      MEMCACHE_SERVER: memcached:11211
      RABBITMQ_URL: amqp://rabbitmq
      {{- if eq .Values.GUISSO_ENABLED "true" }}
      GUISSO_ENABLED: "true"
      GUISSO_URL: ${GUISSO_URL}
      GUISSO_CLIENT_ID: ${GUISSO_CLIENT_ID}
      GUISSO_CLIENT_SECRET: ${GUISSO_CLIENT_SECRET}
      GUISSO_OPENID_STORE: memcached://memcached
      {{- end }}
      SCHEME: ${SCHEME}
      HOSTNAME: ${HOSTNAME}
      WEB_PUMA_FLAGS: ${WEB_PUMA_FLAGS}
      {{- if .Values.INTERCOM_APP_ID }}
      INTERCOM_APP_ID: ${INTERCOM_APP_ID}
      {{- end }}
      {{- if .Values.SMTP_HOST }}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_PORT: ${SMTP_PORT}
      {{- end }}
      EMAIL_SENDER: ${EMAIL_SENDER}
    {{- if .Values.WEB_MEM_LIMIT }}
    mem_limit: ${WEB_MEM_LIMIT}
    {{- end }}
    {{- if .Values.WEB_MEM_RESERVATION }}
    mem_reservation: ${WEB_MEM_RESERVATION}
    {{- end }}
    {{- if .Values.TWITTER_SECRET }}
    secrets:
    - mode: '0444'
      uid: '0'
      gid: '0'
      source: ${TWITTER_SECRET}
      target: twitter_oauth_consumer.yml
    {{- end }}
    labels:
      io.rancher.container.pull_image: always

  memcached:
    image: memcached:1.4.24
    {{- if .Values.MEMCACHED_MEM_LIMIT }}
    mem_limit: ${MEMCACHED_MEM_LIMIT}
    {{- end }}
    {{- if .Values.MEMCACHED_MEM_RESERVATION }}
    mem_reservation: ${MEMCACHED_MEM_RESERVATION}
    {{- end }}
    {{- if .Values.PROM_EXPORTERS }}
    labels:
      io.rancher.sidekicks: memcached-exporter
    {{- end }}

  {{- if .Values.PROM_EXPORTERS }}
  memcached-exporter:
    image: prom/memcached-exporter
    network_mode: container:memcached
    mem_limit: 16m
    mem_reservation: 16m
    labels:
      io.rancher.container.pull_image: always
  {{- end }}

  rabbitmq:
    {{- if .Values.PROM_EXPORTERS }}
    image: rabbitmq:3.6-management
    {{- else }}
    image: rabbitmq:3.6
    {{- end }}
    hostname: ${RABBITMQ_HOSTNAME}
    volumes:
      - ${RABBITMQ_VOLUME}:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: nuntium
      RABBITMQ_DEFAULT_PASS: nuntium
      RABBITMQ_DEFAULT_VHOST: /nuntium
    {{- if .Values.RABBITMQ_MEM_LIMIT }}
    mem_limit: ${RABBITMQ_MEM_LIMIT}
    {{- end }}
    {{- if .Values.RABBITMQ_MEM_RESERVATION }}
    mem_reservation: ${RABBITMQ_MEM_RESERVATION}
    {{- end }}
    {{- if .Values.PROM_EXPORTERS }}
    labels:
      io.rancher.sidekicks: rabbitmq-exporter
    {{- end }}

  {{- if .Values.PROM_EXPORTERS }}
  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter
    network_mode: container:rabbitmq
    mem_limit: 64m
    mem_reservation: 64m
    environment:
      RABBIT_USER: nuntium
      RABBIT_PASSWORD: nuntium
    labels:
      io.rancher.container.pull_image: always
  {{- end }}

  workerfast:
    <<: *rails
    command: "bundle exec lib/services/generic_worker_daemon.rb production fast 1000"
    {{- if .Values.WORKER_MEM_LIMIT }}
    mem_limit: ${WORKER_MEM_LIMIT}
    {{- end }}
    {{- if .Values.WORKER_MEM_RESERVATION }}
    mem_reservation: ${WORKER_MEM_RESERVATION}
    {{- end }}

  workerslow:
    <<: *rails
    command: "bundle exec lib/services/generic_worker_daemon.rb production slow 2000"
    {{- if .Values.WORKER_MEM_LIMIT }}
    mem_limit: ${WORKER_MEM_LIMIT}
    {{- end }}
    {{- if .Values.WORKER_MEM_RESERVATION }}
    mem_reservation: ${WORKER_MEM_RESERVATION}
    {{- end }}

  cron:
    <<: *rails
    command: "bundle exec lib/services/cron_daemon.rb"
    {{- if .Values.WORKER_MEM_LIMIT }}
    mem_limit: ${WORKER_MEM_LIMIT}
    {{- end }}
    {{- if .Values.WORKER_MEM_RESERVATION }}
    mem_reservation: ${WORKER_MEM_RESERVATION}
    {{- end }}

  sched:
    <<: *rails
    command: "bundle exec lib/services/scheduled_jobs_service_daemon.rb"
    {{- if .Values.WORKER_MEM_LIMIT }}
    mem_limit: ${WORKER_MEM_LIMIT}
    {{- end }}
    {{- if .Values.WORKER_MEM_RESERVATION }}
    mem_reservation: ${WORKER_MEM_RESERVATION}
    {{- end }}

  smpp:
    <<: *rails
    command: "bundle exec lib/services/smpp_service_daemon.rb"
    {{- if .Values.WORKER_MEM_LIMIT }}
    mem_limit: ${WORKER_MEM_LIMIT}
    {{- end }}
    {{- if .Values.WORKER_MEM_RESERVATION }}
    mem_reservation: ${WORKER_MEM_RESERVATION}
    {{- end }}

  db-migrate:
    <<: *rails
    {{- if .Values.WORKER_MEM_LIMIT }}
    mem_limit: ${WORKER_MEM_LIMIT}
    {{- end }}
    {{- if .Values.WORKER_MEM_RESERVATION }}
    mem_reservation: ${WORKER_MEM_RESERVATION}
    {{- end }}
    command: /app/migrate
    labels:
      io.rancher.container.start_once: "true"
      io.rancher.container.pull_image: always
