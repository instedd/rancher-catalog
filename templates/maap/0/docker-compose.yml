version: '2'

services:
  web: &web
    image: instedd/maap-store:${MAAP_VERSION}
    command: 
    - /bin/sh
    - -c
    - rm -f /app/tmp/pids/server.pid && bundle exec rails s -p 3000 -b "0.0.0.0"
    environment:
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_USERNAME: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASS}
      DATABASE_NAME: ${DATABASE_NAME}
      RAILS_ENV: production
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      REDIS_URL: redis://cache
      AWS_REGION: ${S3_REGION}
      AWS_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${S3_BUCKET}
      AWS_S3_PREFIX: ${S3_PREFIX}
      SIDEKIQ_USER: ${SIDEKIQ_USER}
      SIDEKIQ_PASSWORD: ${SIDEKIQ_PASSWORD}
    volumes:
      - ${VOLUME_APP_DATA}:/data
    labels:
      io.rancher.scheduler.affinity:host_label: aslm-runner=true
      aslm-runner: 'true'
      io.rancher.container.pull_image: always
    {{- if .Values.WEB_MEM_RESERVATION }}
    mem_reservation: ${WEB_MEM_RESERVATION}
    {{- end}}
    {{- if .Values.WEB_MEM_LIMIT }}
    mem_limit: ${WEB_MEM_LIMIT}
    {{- end}}

  worker:
    <<: *web
    command: bundle exec sidekiq
    {{- if .Values.WORKER_MEM_RESERVATION }}
    mem_reservation: ${WORKER_MEM_RESERVATION}
    {{- end}}
    {{- if .Values.WORKER_MEM_LIMIT }}
    mem_limit: ${WORKER_MEM_LIMIT}
    {{- end}}

  db-migrate:
    image: instedd/maap-store:${MAAP_VERSION}
    environment:
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_USERNAME: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASS}
      DATABASE_NAME: ${DATABASE_NAME}
      RAILS_ENV: production
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
    command:
    - bundle
    - exec
    - rails
    - db:migrate
    labels:
      io.rancher.container.pull_image: always
      io.rancher.container.start_once: 'true'

  cache:
    image: redis
    volumes:
      - ${VOLUME_CACHE_DATA}:/data
    labels:
      io.rancher.container.pull_image: always
      io.rancher.scheduler.affinity:host_label: aslm-runner=true
      aslm-runner: 'true'
    {{- if .Values.CACHE_MEM_RESERVATION }}
    mem_reservation: ${CACHE_MEM_RESERVATION}
    {{- end}}
    {{- if .Values.CACHE_MEM_LIMIT }}
    mem_limit: ${CACHE_MEM_LIMIT}
    {{- end}}
  export:
    image: matiasgarciaisaia/postgres-backup-s3:12.5
    environment:
      SCHEDULE: '@every 24h'
      S3_REGION: ${S3_REGION}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_PREFIX: ${S3_PREFIX}
      POSTGRES_DATABASE: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASS}
      POSTGRES_EXTRA_OPTS: -t antibiotic_consumption_stats -t patients -t patient_entries -t lab_records -t lab_record_imports -t specimen_sources -t electronic_pharmacy_stock_records -t sites -t culture_types -t clinical_services -t antibiotics
      POSTGRES_HOST: ${DATABASE_HOST}
    labels:
      io.rancher.container.pull_image: always
      io.rancher.scheduler.affinity:host_label: aslm-runner=true
      aslm-runner: 'true'
    {{- if .Values.EXPORT_MEM_RESERVATION }}
    mem_reservation: ${EXPORT_MEM_RESERVATION}
    {{- end}}
    {{- if .Values.EXPORT_MEM_LIMIT }}
    mem_limit: ${EXPORT_MEM_LIMIT}
    {{- end}}

  {{- if .Values.BACKUP_S3_BUCKET }}
  backup:
    image: matiasgarciaisaia/postgres-backup-s3:12.5
    environment:
      SCHEDULE: '@every 24h'
      S3_REGION: ${BACKUP_S3_REGION}
      S3_ACCESS_KEY_ID: ${BACKUP_S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${BACKUP_S3_SECRET_ACCESS_KEY}
      S3_BUCKET: ${BACKUP_S3_BUCKET}
      S3_PREFIX: ${BACKUP_S3_PREFIX}
      POSTGRES_DATABASE: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASS}
      POSTGRES_HOST: ${DATABASE_HOST}
    labels:
      io.rancher.container.pull_image: always
      io.rancher.scheduler.affinity:host_label: aslm-runner=true
      aslm-runner: 'true'
  {{- end}}
